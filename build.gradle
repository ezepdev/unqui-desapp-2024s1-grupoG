plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

group = 'ar.edu.unq.desapp.grupog'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // API Web
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.tngtech.archunit:archunit:1.3.0'

    // Prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'


    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Caching
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation('org.ehcache:ehcache:3.10.8') {
        capabilities {
            requireCapability('org.ehcache:ehcache-jakarta')
        }
    }

    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    // Database
    runtimeOnly 'com.h2database:h2'
    // Dev tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
    // JWT Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "ar/edu/unq/desapp/grupog/backendapicryptoexchange/config/**",
                    "ar/edu/unq/desapp/grupog/backendapicryptoexchange/api/contracts/**",
                    "**/config/*",
                    "ar/edu/unq/desapp/grupog/backendapicryptoexchange/api/controllers/APIExceptionController.class"
            ])
        }))
    }
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

tasks.test {
    useJUnitPlatform()
    jvmArgs '-XX:+EnableDynamicAgentLoading'
    finalizedBy tasks.jacocoTestReport
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}


sonar {
    var exclusions = List.of(
            "**/ar/edu/unq/desapp/grupog/backendapicryptoexchange/config/**/*",
            "**/ar/edu/unq/desapp/grupog/backendapicryptoexchange/api/contracts/**/*",
            "**/config/*",
            "**/ar/edu/unq/desapp/grupog/backendapicryptoexchange/api/controllers/APIExceptionController.class"
    )

    properties {
        property "sonar.projectKey", "ezepdev_unqui-desapp-2024s1-grupoG"
        property "sonar.organization", "ezepdev"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.gradle.skipCompile", "true"
        property 'sonar.coverage.exclusions', exclusions
    }
}

tasks.named('sonarqube').configure {
    dependsOn(tasks.named('test'))
}
